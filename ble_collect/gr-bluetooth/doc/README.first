#
# Copyright 2008, 2009 Dominic Spill, Michael Ossmann
# 
# This file is part of gr-bluetooth
# 
# gr-bluetooth is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
# 
# gr-bluetooth is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with gr-bluetooth; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

Welcome to gr-bluetooth!

gr-bluetooth is an implementation of the Bluetooth baseband layer for GNU Radio
for experimentation and teaching students about Software Defined Radio, it
should not be used for Bluetooth communications as it is not a complete
software stack.

The gr-bluetooth web site is: http://sourceforge.net/projects/gr-bluetooth/

The software consists of signal processing blocks written in C++ (in src/lib)
and front-end command line tools written in Python (in src/python).

See ../README for build instructions.

In order to get to know gr-bluetooth and to be able to run the examples below,
you should download the "samples" package from the web site.  These samples are
also available via SVN.

Examples:

1. Getting help:

$ btrx -h

2. Finding packets and displaying LAPs:

$ btrx -f 2476M -i samples/headset3.cfile

See samples/manifest.txt for similar examples using different sample rates and
selection of multiple channels.

3. UAP discovery by CRC:

$ btrx -d 8 -f 2476.5M -i samples/keyboard1.cfile -l 4831dd

4. UAP/CLK1-6 discovery by time intervals:

$ btrx -d 8 -i samples/headset1.cfile -f 2476.5M -l 24d952

5. Clock (CLK1-27) discovery followed by hopping:

$ btrx -d 8 -i samples/headset1.cfile -f 2476.5M -l 24d952 -p
$ btrx -d 16 -i samples/headset2.cfile -f 2476M -l 24d952 -p

6. Decoding all piconets on all available channels:

$ btrx -d 16 -f 2476M -i samples/headset2.cfile -S
